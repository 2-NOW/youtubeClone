[{"I:\\youtubeClone\\client\\src\\index.js":"1","I:\\youtubeClone\\client\\src\\App.js":"2","I:\\youtubeClone\\client\\src\\serviceWorker.js":"3","I:\\youtubeClone\\client\\src\\_reducers\\index.js":"4","I:\\youtubeClone\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"5","I:\\youtubeClone\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"6","I:\\youtubeClone\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"7","I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\NavBar.js":"8","I:\\youtubeClone\\client\\src\\components\\views\\Footer\\Footer.js":"9","I:\\youtubeClone\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js":"10","I:\\youtubeClone\\client\\src\\hoc\\auth.js":"11","I:\\youtubeClone\\client\\src\\_reducers\\user_reducers.js":"12","I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js":"13","I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js":"14","I:\\youtubeClone\\client\\src\\_actions\\user_actions.js":"15","I:\\youtubeClone\\client\\src\\Config.js":"16","I:\\youtubeClone\\client\\src\\_actions\\types.js":"17"},{"size":1020,"mtime":1606998936387,"results":"18","hashOfConfig":"19"},{"size":1392,"mtime":1606998936383,"results":"20","hashOfConfig":"19"},{"size":5151,"mtime":1606998936387,"results":"21","hashOfConfig":"19"},{"size":163,"mtime":1606998936384,"results":"22","hashOfConfig":"19"},{"size":471,"mtime":1606998936385,"results":"23","hashOfConfig":"19"},{"size":7030,"mtime":1606998936386,"results":"24","hashOfConfig":"19"},{"size":5987,"mtime":1607345575724,"results":"25","hashOfConfig":"19"},{"size":1456,"mtime":1607346031852,"results":"26","hashOfConfig":"19"},{"size":474,"mtime":1607346061200,"results":"27","hashOfConfig":"19"},{"size":5064,"mtime":1607346115740,"results":"28","hashOfConfig":"19"},{"size":1244,"mtime":1606998936386,"results":"29","hashOfConfig":"19"},{"size":621,"mtime":1606998936384,"results":"30","hashOfConfig":"19"},{"size":728,"mtime":1606998936385,"results":"31","hashOfConfig":"19"},{"size":1244,"mtime":1606998936386,"results":"32","hashOfConfig":"19"},{"size":1084,"mtime":1606998936384,"results":"33","hashOfConfig":"19"},{"size":59,"mtime":1606998936383,"results":"34","hashOfConfig":"19"},{"size":168,"mtime":1606998936384,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"7uqi81",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"I:\\youtubeClone\\client\\src\\index.js",[],["77","78"],"I:\\youtubeClone\\client\\src\\App.js",[],"I:\\youtubeClone\\client\\src\\serviceWorker.js",[],"I:\\youtubeClone\\client\\src\\_reducers\\index.js",[],"I:\\youtubeClone\\client\\src\\components\\views\\LandingPage\\LandingPage.js",[],"I:\\youtubeClone\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["79","80"],"import React from 'react';\r\nimport moment from 'moment';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { registerUser } from '../../../_actions/user_actions';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Form, Input, Button } from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        lastName: '',\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        name: Yup.string().required('Name is required'),\r\n        lastName: Yup.string().required('Last Name is required'),\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n          .required('Confirm Password is required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name,\r\n            lastname: values.lastname,\r\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`,\r\n          };\r\n\r\n          dispatch(registerUser(dataToSubmit)).then((response) => {\r\n            if (response.payload.success) {\r\n              props.history.push('/login');\r\n            } else {\r\n              alert(response.payload.err.errmsg);\r\n            }\r\n          });\r\n\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <h2>Sign up</h2>\r\n            <Form\r\n              style={{ minWidth: '375px' }}\r\n              {...formItemLayout}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              <Form.Item required label=\"Name\">\r\n                <Input\r\n                  id=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  type=\"text\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.name && touched.name\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"input-feedback\">{errors.name}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Last Name\">\r\n                <Input\r\n                  id=\"lastName\"\r\n                  placeholder=\"Enter your Last Name\"\r\n                  type=\"text\"\r\n                  value={values.lastName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.lastName && touched.lastName\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.lastName && touched.lastName && (\r\n                  <div className=\"input-feedback\">{errors.lastName}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                required\r\n                label=\"Email\"\r\n                hasFeedback\r\n                validateStatus={\r\n                  errors.email && touched.email ? 'error' : 'success'\r\n                }\r\n              >\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your Email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                required\r\n                label=\"Password\"\r\n                hasFeedback\r\n                validateStatus={\r\n                  errors.password && touched.password ? 'error' : 'success'\r\n                }\r\n              >\r\n                <Input\r\n                  id=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Confirm\" hasFeedback>\r\n                <Input\r\n                  id=\"confirmPassword\"\r\n                  placeholder=\"Enter your confirmPassword\"\r\n                  type=\"password\"\r\n                  value={values.confirmPassword}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.confirmPassword && touched.confirmPassword\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.confirmPassword && touched.confirmPassword && (\r\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item {...tailFormItemLayout}>\r\n                <Button\r\n                  onClick={handleSubmit}\r\n                  type=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;\r\n","I:\\youtubeClone\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["81","82"],"import React, { useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { loginUser } from '../../../_actions/user_actions';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Form, Input, Button, Checkbox, Typography } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n  const rememberMeChecked = localStorage.getItem('rememberMe') ? true : false;\r\n\r\n  const [formErrorMessage, setFormErrorMessage] = useState('');\r\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked);\r\n\r\n  const handleRememberMe = () => {\r\n    setRememberMe(!rememberMe);\r\n  };\r\n\r\n  const initialEmail = localStorage.getItem('rememberMe')\r\n    ? localStorage.getItem('rememberMe')\r\n    : '';\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: initialEmail,\r\n        password: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n          };\r\n\r\n          dispatch(loginUser(dataToSubmit))\r\n            .then((response) => {\r\n              if (response.payload.loginSuccess) {\r\n                window.localStorage.setItem('userId', response.payload.userId);\r\n                if (rememberMe === true) {\r\n                  window.localStorage.setItem('rememberMe', values.id);\r\n                } else {\r\n                  localStorage.removeItem('rememberMe');\r\n                }\r\n                props.history.push('/');\r\n              } else {\r\n                setFormErrorMessage('Check out your Account or Password again');\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              setFormErrorMessage('Check out your Account or Password again');\r\n              setTimeout(() => {\r\n                setFormErrorMessage('');\r\n              }, 3000);\r\n            });\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <Title level={2}>Log In</Title>\r\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"email\"\r\n                  prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"password\"\r\n                  prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              {formErrorMessage && (\r\n                <label>\r\n                  <p\r\n                    style={{\r\n                      color: '#ff0000bf',\r\n                      fontSize: '0.7rem',\r\n                      border: '1px solid',\r\n                      padding: '1rem',\r\n                      borderRadius: '10px',\r\n                    }}\r\n                  >\r\n                    {formErrorMessage}\r\n                  </p>\r\n                </label>\r\n              )}\r\n\r\n              <Form.Item>\r\n                <Checkbox\r\n                  id=\"rememberMe\"\r\n                  onChange={handleRememberMe}\r\n                  checked={rememberMe}\r\n                >\r\n                  Remember me\r\n                </Checkbox>\r\n                <a\r\n                  className=\"login-form-forgot\"\r\n                  href=\"/reset_user\"\r\n                  style={{ float: 'right' }}\r\n                >\r\n                  forgot password\r\n                </a>\r\n                <div>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    className=\"login-form-button\"\r\n                    style={{ minWidth: '100%' }}\r\n                    disabled={isSubmitting}\r\n                    onSubmit={handleSubmit}\r\n                  >\r\n                    Log in\r\n                  </Button>\r\n                </div>\r\n                Or <a href=\"/register\">register now!</a>\r\n              </Form.Item>\r\n            </form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n","I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\NavBar.js",[],"I:\\youtubeClone\\client\\src\\components\\views\\Footer\\Footer.js",[],"I:\\youtubeClone\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js",["83","84","85","86","87"],"import React, { useState } from 'react';\r\nimport { Typography, Button, Form, message, Input } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport Dropzone from 'react-dropzone';\r\nimport Axios from 'axios';\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst PrivateOptions = [\r\n  { value: 0, label: 'Private' },\r\n  { value: 1, label: 'Public' },\r\n];\r\n\r\nconst CategoryOptions = [\r\n  { value: 0, label: 'Film & Animation' },\r\n  { value: 1, label: 'Autos & Vehicles' },\r\n  { value: 3, label: 'Music' },\r\n  { value: 4, label: 'Pets & Animals' },\r\n];\r\n\r\nfunction VideoUploadPage() {\r\n  const [VideoTitle, setVideoTitle] = useState('');\r\n  const [Description, setDescription] = useState('');\r\n  const [Private, setPrivate] = useState(0);\r\n  const [Category, setCategory] = useState('Film & Animation'); // default state\r\n  const [FilePath, setFilePath] = useState('');\r\n  const [Duration, setDuration] = useState('');\r\n  const [ThumbnailPath, setThumbnailPath] = useState('');\r\n\r\n  const onTitleChange = (e) => {\r\n    setVideoTitle(e.currentTarget.value); // e.currentTarget.value 입력창에 치는 값이 event로 발생, 가져와서 state를 변경\r\n  };\r\n\r\n  const onDescriptionChange = (e) => {\r\n    setDescription(e.currentTarget.value);\r\n  };\r\n\r\n  const onPrivateChange = (e) => {\r\n    setPrivate(e.currentTarget.value);\r\n  };\r\n\r\n  const onCategoryChange = (e) => {\r\n    setCategory(e.currentTarget.value);\r\n  };\r\n\r\n  const onDrop = (files) => {\r\n    let formData = new FormData();\r\n    const config = {\r\n      header: { 'content-type': 'multipart/form-data' }, // axios post request보낼 때 header에 content type을 같이 보내야 오류가 안생김\r\n    };\r\n    formData.append('file', files[0]); // files parameter에 dropzone에 올린 file 정보가 담김 / array로 한 이유는 첫번 째 요소를 가져오려고.\r\n    Axios.post('/api/video/uploadfiles', formData, config).then((response) => {\r\n      if (response.data.success) {\r\n        console.log(response.data);\r\n\r\n        let variable = {\r\n          url: response.data.url,\r\n          fileName: response.data.fileName,\r\n        };\r\n\r\n        setFilePath(response.data.url);\r\n\r\n        Axios.post('/api/video/thumbnail', variable).then((response) => {\r\n          if (response.data.success) {\r\n            setDuration(response.data.fileDuration);\r\n            setThumbnailPath(response.data.url);\r\n          } else {\r\n            alert('create thumbnail failed');\r\n          }\r\n        });\r\n      } else {\r\n        alert('video upload failed ');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\r\n      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n        <Title level={2}>Upload Video</Title>\r\n      </div>\r\n\r\n      <Form onSubmit>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {/* Drop Zone */}\r\n          <Dropzone\r\n            onDrop={onDrop}\r\n            multiple={false} // 한번에 여러개 / 한 개\r\n            maxSize={1000000000}\r\n          >\r\n            {({ getRootProps, getInputProps }) => (\r\n              <div\r\n                style={{\r\n                  width: '300px',\r\n                  height: '240px',\r\n                  border: '1px solid lightgray',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                }}\r\n                {...getRootProps()}\r\n              >\r\n                <input {...getInputProps()} />\r\n                <PlusOutlined type=\"plus\" style={{ fontSize: '3rem' }} />\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n          {/* Thumbnail */}\r\n          {ThumbnailPath && (\r\n            <div>\r\n              <img\r\n                src={`http://localhost:8080/${ThumbnailPath}`}\r\n                alt=\"thumbnail\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        {/* Title */}\r\n        <label>Title</label>\r\n        <Input onChange={onTitleChange} value={VideoTitle} />\r\n        <br />\r\n        <br />\r\n\r\n        {/* Description */}\r\n        <label>Description</label>\r\n        <TextArea onChange={onDescriptionChange} value={Description} />\r\n        <br />\r\n        <br />\r\n\r\n        {/* Private Change */}\r\n        <select onChange={onPrivateChange}>\r\n          {PrivateOptions.map((item, index) => (\r\n            <option key={index} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <br />\r\n        <br />\r\n\r\n        {/* Category Change */}\r\n        <select onChange={onCategoryChange}>\r\n          {CategoryOptions.map((item, index) => (\r\n            <option key={index} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <br />\r\n        <br />\r\n\r\n        <Button type=\"primary\" size=\"large\" onClick>\r\n          Upload\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoUploadPage;\r\n","I:\\youtubeClone\\client\\src\\hoc\\auth.js",["88"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react';\r\nimport { auth } from '../_actions/user_actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n  function AuthenticationCheck(props) {\r\n    let user = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n      //To know my current status, send Auth request\r\n      dispatch(auth()).then((response) => {\r\n        //Not Loggined in Status\r\n        if (!response.payload.isAuth) {\r\n          if (option) {\r\n            props.history.push('/login');\r\n          }\r\n          //Loggined in Status\r\n        } else {\r\n          //supposed to be Admin page, but not admin person wants to go inside\r\n          if (adminRoute && !response.payload.isAdmin) {\r\n            props.history.push('/');\r\n          }\r\n          //Logged in Status, but Try to go into log in page\r\n          else {\r\n            if (option === false) {\r\n              props.history.push('/');\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, []);\r\n\r\n    return <SpecificComponent {...props} user={user} />;\r\n  }\r\n  return AuthenticationCheck;\r\n}\r\n","I:\\youtubeClone\\client\\src\\_reducers\\user_reducers.js",["89","90","91","92"],"import {\r\n    LOGIN_USER,\r\n    REGISTER_USER,\r\n    AUTH_USER,\r\n    LOGOUT_USER,\r\n} from '../_actions/types';\r\n\r\nexport default function (state = {}, action) {\r\n    switch (action.type) {\r\n        case LOGIN_USER:\r\n            return { ...state, loginSuccess: action.payload }\r\n            break;\r\n        case REGISTER_USER:\r\n            return { ...state, register: action.payload }\r\n            break;\r\n        case AUTH_USER:\r\n            return { ...state, userData: action.payload }\r\n            break;\r\n        case LOGOUT_USER:\r\n            return {...state }\r\n        default:\r\n            return state;\r\n    }\r\n}","I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js",[],"I:\\youtubeClone\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js",[],"I:\\youtubeClone\\client\\src\\_actions\\user_actions.js",[],"I:\\youtubeClone\\client\\src\\Config.js",[],"I:\\youtubeClone\\client\\src\\_actions\\types.js",[],["93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":84,"column":11,"nodeType":"101","messageId":"102","endLine":84,"endColumn":16},{"ruleId":"99","severity":1,"message":"103","line":89,"column":11,"nodeType":"101","messageId":"102","endLine":89,"endColumn":22},{"ruleId":"99","severity":1,"message":"100","line":77,"column":11,"nodeType":"101","messageId":"102","endLine":77,"endColumn":16},{"ruleId":"99","severity":1,"message":"103","line":82,"column":11,"nodeType":"101","messageId":"102","endLine":82,"endColumn":22},{"ruleId":"99","severity":1,"message":"104","line":2,"column":36,"nodeType":"101","messageId":"102","endLine":2,"endColumn":43},{"ruleId":"99","severity":1,"message":"105","line":25,"column":10,"nodeType":"101","messageId":"102","endLine":25,"endColumn":17},{"ruleId":"99","severity":1,"message":"106","line":26,"column":10,"nodeType":"101","messageId":"102","endLine":26,"endColumn":18},{"ruleId":"99","severity":1,"message":"107","line":27,"column":10,"nodeType":"101","messageId":"102","endLine":27,"endColumn":18},{"ruleId":"99","severity":1,"message":"108","line":28,"column":10,"nodeType":"101","messageId":"102","endLine":28,"endColumn":18},{"ruleId":"109","severity":1,"message":"110","line":6,"column":1,"nodeType":"111","endLine":38,"endColumn":2},{"ruleId":"109","severity":1,"message":"110","line":8,"column":1,"nodeType":"111","endLine":24,"endColumn":2},{"ruleId":"112","severity":1,"message":"113","line":12,"column":13,"nodeType":"114","messageId":"115","endLine":12,"endColumn":19},{"ruleId":"112","severity":1,"message":"113","line":15,"column":13,"nodeType":"114","messageId":"115","endLine":15,"endColumn":19},{"ruleId":"112","severity":1,"message":"113","line":18,"column":13,"nodeType":"114","messageId":"115","endLine":18,"endColumn":19},{"ruleId":"95","replacedBy":"116"},{"ruleId":"97","replacedBy":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'dirty' is assigned a value but never used.","Identifier","unusedVar","'handleReset' is assigned a value but never used.","'message' is defined but never used.","'Private' is assigned a value but never used.","'Category' is assigned a value but never used.","'FilePath' is assigned a value but never used.","'Duration' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["118"],["119"],"no-global-assign","no-unsafe-negation"]